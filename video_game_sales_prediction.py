# -*- coding: utf-8 -*-
"""Video game sales Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxO1Kz5Yl_0k7jLLErN5--M71n1B9lCg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sbn

from google.colab import files

uploaded = files.upload()

df = pd.read_csv('Video_Games_Sales_as_at_22_Dec_2016.csv')
df.head()

df.describe()

df.info()

df.isna().sum()

df = df.dropna()

df.head(15)

df.isna().sum()

df.tail(5)

# dataset analysis to summarize main characteristics

import matplotlib as mpb

games= df.groupby("Genre")["Global_Sales"].count().head(10)
custom_colors= mpb.colors.Normalize(vmin= min(games), vmax=max(games))
plt.figure(figsize= (8,8))
plt.pie(games, labels=games.index)
plt.rc('font',size=12)
plt.title("Categories of Games")
plt.show()

#applying linear regression model

#Dependent and Independent Variable
x = df[["Year_of_Release", "NA_Sales","EU_Sales", "JP_Sales", "Other_Sales"]]
y = df["Global_Sales"]

# Train test split
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest= train_test_split(x,y,test_size= 0.2, random_state=42)

#linear regression
from sklearn.linear_model import LinearRegression
model= LinearRegression()
model.fit(xtrain, ytrain)
predictions = model.predict(xtest)
predictions

print('intercept', model.intercept_)
print('slope', model.coef_)

# Decision Tree
from sklearn.tree import DecisionTreeRegressor
model= DecisionTreeRegressor()
model.fit(xtrain,ytrain)
predictions = model.predict(xtest)
predictions

plt.plot(predictions, color = 'purple')
plt.title('Video Game Prediction Plot')
plt.xlabel('xtrain')
plt.ylabel('ytrain')

print(xtrain)

print(ytrain)

from sklearn.model_selection import cross_val_score
cv_results = cross_val_score(model, xtrain, ytrain, cv = 5)
print(cv_results)

predictions

np.mean(cv_results)

y_pred = model.predict(xtest)
print(y_pred)

from sklearn.metrics import mean_squared_error
print("R^2 = ",model.score(xtest,ytest))
rmse = np.sqrt(mean_squared_error(ytest, y_pred))
print("Root mean square error = ", rmse)

plt.scatter(xtrain.iloc[:,1], ytrain, color = 'orange')

plt.scatter(xtest.iloc[:,1], y_pred, color = 'red')

plt.plot(xtest.iloc[:,1],y_pred,color = 'yellow',linewidth = 3)
plt.show()

plt.scatter(xtrain.iloc[:,1],ytrain,color = 'blue')

plt.scatter(xtest.iloc[:,1],y_pred,color = 'green')

